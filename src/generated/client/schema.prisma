datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/client"
}

model Allergies {
  id              Int                @id @default(autoincrement())
  name            String             @db.VarChar(100)
  allergies_drink Allergies_drinks[]

  @@map("allergies")
}

model Allergies_drinks {
  id          Int       @id @default(autoincrement())
  allergie    Allergies @relation(fields: [allergiesId], references: [id])
  allergiesId Int       @map("allergies_id")
  drink       Drinks    @relation(fields: [drinksId], references: [id])
  drinksId    Int       @map("drinks_id")

  @@map("allergies_drinks")
}

model Categories {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(100)

  Drinks Drinks[]
  @@map("categories")
}

model Comments {
  id         Int       @id @default(autoincrement())
  user       Users     @relation(fields: [userId], references: [id])
  userId     Int       @map("user_id")
  drink      Drinks    @relation(fields: [drinksId], references: [id])
  drinksId   Int       @map("drinks_id")
  content    String
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  @@map("comments")
}

model Drinks {
  id           Int        @id @default(autoincrement())
  category     Categories @relation(fields: [categoriesId], references: [id])
  categoriesId Int        @map("categories_id")
  koreanName   String     @map("korean_name") @db.VarChar(100)
  englishName  String     @map("english_name") @db.VarChar(100)
  description  String
  isNew        Boolean    @map("is_new") @db.TinyInt

  Allergies_drinks Allergies_drinks[]
  Comments         Comments[]
  Images           Images[]
  Likes            Likes[]
  Nutrition        Nutrition[]

  @@map("drinks")
}

model Images {
  id        Int    @id @default(autoincrement())
  drink     Drinks @relation(fields: [drinksId], references: [id])
  drinksId  Int    @map("drinks_id")
  imagesUrl String @map("images_url")

  @@map("images")
}

model Likes {
  id       Int    @id @default(autoincrement())
  userId   Int    @map("user_id")
  drinksId Int    @map("drinks_id")
  user     Users  @relation(fields: [userId], references: [id])
  drink    Drinks @relation(fields: [drinksId], references: [id])

  @@map("likes")
}

model Nutrition {
  id       Int    @id @default(autoincrement())
  drink    Drinks @relation(fields: [drinksId], references: [id])
  drinksId Int    @map("drinks_id")
  calorie  Float  @db.Double
  natrium  Float  @db.Double
  fat      Float  @db.Double
  sugar    Float  @db.Double
  protein  Float  @db.Double
  caffeine Float  @db.Double


  @@map("nutrition")
}

model Users {
  id           Int        @id @default(autoincrement())
  email        String     @unique
  password     String
  username     String?
  address      String?
  phoneNumber  String?    @map("phone_number")
  policyAgreed Boolean    @default(true) @map("policy_agreed") @db.TinyInt
  createdAt    DateTime?  @default(now()) @map("created_at")
  updatedAt    DateTime?  @updatedAt @map("updated_at")
  Comments     Comments[]
  Likes        Likes[]

  @@map("users")
}
